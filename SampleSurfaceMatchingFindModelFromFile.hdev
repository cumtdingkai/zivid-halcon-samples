<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<c>* BSD 3-Clause License</c>
<c>* </c>
<c>* Copyright (c) 2019, Zivid AS</c>
<c>* All rights reserved.</c>
<c>* </c>
<c>* Redistribution and use in source and binary forms, with or without</c>
<c>* modification, are permitted provided that the following conditions are met:</c>
<c>* </c>
<c>* 1. Redistributions of source code must retain the above copyright notice, this</c>
<c>*    list of conditions and the following disclaimer.</c>
<c>* </c>
<c>* 2. Redistributions in binary form must reproduce the above copyright notice,</c>
<c>*    this list of conditions and the following disclaimer in the documentation</c>
<c>*    and/or other materials provided with the distribution.</c>
<c>* </c>
<c>* 3. Neither the name of the copyright holder nor the names of its</c>
<c>*    contributors may be used to endorse or promote products derived from</c>
<c>*    this software without specific prior written permission.</c>
<c>* </c>
<c>* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</c>
<c>* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</c>
<c>* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</c>
<c>* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</c>
<c>* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</c>
<c>* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</c>
<c>* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</c>
<c>* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</c>
<c>* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</c>
<c>* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</c>
<c></c>
<c>* </c>
<c>* Example for the usage of a Zivid 3D camera in HALCON</c>
<c>* </c>
<c>* This example demonstrates surface-based 3D matching on data taken</c>
<c>* with a Zivid camera. The model used for matching is created from a</c>
<c>* reference view of the object, see</c>
<c>* SampleSurfaceMatchingCreateModelFromFile.hdev. The model is then</c>
<c>* searched for in a newly acquired 3D point cloud. This example comes</c>
<c>* with models for the three following objects: a Twinings tea box,</c>
<c>* a Pringles can (190 g), and a plastic Coca-Cola bottle (0.5 l).</c>
<c>* </c>
<c>* Please note that you first need to install Zivid Software and</c>
<c>* correctly set the environment variables. After this, you can</c>
<c>* access the camera with the HALCON GenICamTL interface.</c>
<c>*</c>
<c></c>
<c>* Prepare the graphics window</c>
<l>dev_close_window ()</l>
<l>WinWidth := 1920</l>
<l>WinHeight := 1200</l>
<l>dev_open_window (0, 0, WinWidth, WinHeight, 'black', Window3D)</l>
<c></c>
<c>* Specify the object for surface-based 3D matching</c>
<c>* Existing Twinings tea box model</c>
<l>Filename := 'Twinings tea box'</l>
<c>* Existing Pringles can model</c>
<l>* Filename := 'Pringles can'</l>
<c>* Existing Coca-Cola bottle model</c>
<l>* Filename := 'Coca-Cola bottle'</l>
<c></c>
<c>* Specify whether you want to use your own model created with the SampleSurfaceMatchingCreateModelFromFile.hdev</c>
<l>MyModel := false</l>
<l>* MyModel := true</l>
<c></c>
<c>* Load the HALCON model for surface-based 3D matching</c>
<l>if (MyModel)</l>
<l>    SFMFilename := 'SFM'</l>
<l>else</l>
<l>    tuple_add(Filename,'/SFM', SFMFilename)</l>
<l>endif</l>
<l>read_surface_model (SFMFilename, SFM)</l>
<c></c>
<c>* Load the HALCON 3D object model (used for visualization purpose)</c>
<l>if (MyModel)</l>
<l>    ObjectModel3DFilename := 'ObjectModel3D'</l>
<l>else</l>
<l>    tuple_add(Filename,'/ObjectModel3D', ObjectModel3DFilename)</l>
<l>endif</l>
<l>read_object_model_3d (ObjectModel3DFilename, 'm', [], [], ObjectModel3D, Status)</l>
<c></c>
<l>for Index := 1 to 5 by 1</l>
<c>    </c>
<l>    tuple_add(Filename,'/im', SceneFilename)</l>
<l>    tuple_add(SceneFilename,Index, SceneFilename)</l>
<l>    tuple_add(SceneFilename,'.ply', SceneFilename)    </l>
<l>    read_object_model_3d (SceneFilename, 'm', ['xyz_map_width'], [1920], ObjectModel3D_Scene, Status)</l>
<c>    </c>
<c>    * Fix to make the point cloud appear with colors</c>
<l>    get_object_model_3d_params (ObjectModel3D_Scene, 'red', red)</l>
<l>    get_object_model_3d_params (ObjectModel3D_Scene, 'green', green)</l>
<l>    get_object_model_3d_params (ObjectModel3D_Scene, 'blue', blue)</l>
<l>    set_object_model_3d_attrib (ObjectModel3D_Scene, '&amp;red', 'points', red, ObjectModel3D_Scene)</l>
<l>    set_object_model_3d_attrib (ObjectModel3D_Scene, '&amp;green', 'points', green, ObjectModel3D_Scene)</l>
<l>    set_object_model_3d_attrib (ObjectModel3D_Scene, '&amp;blue', 'points', blue, ObjectModel3D_Scene)</l>
<c>    </c>
<c>    * Generate X, Y, and Z image</c>
<l>    object_model_3d_to_xyz( X, Y, Z, ObjectModel3D_Scene, 'from_xyz_map', [], [])  </l>
<c>    </c>
<c>    * Generate R, G, B, and RGB image</c>
<l>    get_image_size (X, Width, Height)</l>
<l>    gen_image_const (R, 'real', Width, Height)</l>
<l>    gen_image_const (G, 'real', Width, Height)</l>
<l>    gen_image_const (B, 'real', Width, Height)</l>
<l>    get_domain (R, Domain)</l>
<l>    get_region_points (Domain, Rows, Columns)</l>
<l>    set_grayval (R, Rows, Columns, red)</l>
<l>    set_grayval (G, Rows, Columns, green)</l>
<l>    set_grayval (B, Rows, Columns, blue)</l>
<l>    compose3(R,G,B,RGB)</l>
<c>    </c>
<c>    * Compute 3D object model normals, which is necessary for surface-based 3D matching</c>
<l>    count_seconds (T0)</l>
<l>    sample_object_model_3d (ObjectModel3D_Scene,'fast_compute_normals', 1, [], [], ObjectModel3D_Scene)</l>
<l>    count_seconds (T1)</l>
<l>    TimeForSampling := (T1 - T0)     </l>
<c>    </c>
<c>    * Object detection and pose estimation based on surface-based 3D matching</c>
<l>    count_seconds (T0)</l>
<c>    * RelSamplingDistance - point cloud downsampling (0 = no downsampling)</c>
<c>    * Twinings tea box</c>
<l>    if (Filename = 'Twinings tea box')</l>
<l>        RelSamplingDistance := 0.01</l>
<l>    endif</l>
<c>    * Pringles can</c>
<l>    if (Filename = 'Pringles can')</l>
<l>        RelSamplingDistance := 0.03</l>
<l>    endif</l>
<c>    * Coca-Cola bottle</c>
<l>    if (Filename = 'Coca-Cola bottle')</l>
<l>        RelSamplingDistance := 0.003</l>
<l>    endif</l>
<c>    * KeyPointFraction - additional downsampling for the detection (1 = all points used)</c>
<l>    KeyPointFraction := 1</l>
<c>    * MinScore - minimum score for the detection</c>
<l>    MinScore := 0.4</l>
<l>    find_surface_model (SFM, ObjectModel3D_Scene, RelSamplingDistance, KeyPointFraction, MinScore, 'true', ['num_matches', 'scene_normal_computation'], [10, 'mls'], Pose,  Score, SurfaceMatchingResultID)</l>
<l>    count_seconds (T1)</l>
<l>    TimeForMatching := (T1 - T0)</l>
<c>    </c>
<l>    if (Score!=[])</l>
<c></c>
<c>        * Prepare the result(s)</c>
<l>        if (Score[0] &lt; MinScore)</l>
<l>            continue</l>
<l>        endif    </l>
<l>        CPose := Pose[0:6]</l>
<l>        rigid_trans_object_model_3d (ObjectModel3D, CPose, ObjectModel3D_Result)</l>
<c></c>
<c>        * Visualize matching scene and key points</c>
<l>        Message := 'Original scene points (white)'</l>
<l>        Message[1] := 'Sampled scene points (cyan)'</l>
<l>        Message[2] := 'Key points (yellow)'</l>
<l>        get_surface_matching_result (SurfaceMatchingResultID, 'sampled_scene', [], SampledScene)</l>
<l>        get_surface_matching_result (SurfaceMatchingResultID, 'key_points', [], KeyPoints)</l>
<l>        dev_clear_window ()</l>
<l>        Message[3] := ' '</l>
<l>        Message[4] := 'Rotate: Left button'</l>
<l>        Message[5] := 'Zoom:   Shift + left button'</l>
<l>        Message[6] := 'Move:   Ctrl  + left button'</l>
<l>        visualize_object_model_3d (Window3D, [ObjectModel3D_Scene,SampledScene,KeyPoints], [], [], ['color_' + [0,1,2],'point_size_' + [0,1,2]], ['gray','cyan','yellow',1.0,3.0,5.0], Message, [], Message, PoseOut)</l>
<c>         </c>
<c>        * Visualize result(s)</c>
<l>        Message1 := 'Scene: ' + Index</l>
<l>        Message1[1] := 'Found ' + |ObjectModel3D_Result| + ' object(s) in ' + TimeForMatching$'.3' + ' ms'</l>
<l>        ScoreString := sum(Score$'.2f' + ' / ')</l>
<l>        Message1[2] := 'Score(s): ' + ScoreString{0:strlen(ScoreString) - 4}</l>
<l>        NumResult := |ObjectModel3D_Result|</l>
<l>        tuple_gen_const (NumResult, 'green', Colors)</l>
<l>        tuple_gen_const (NumResult, 'circle', Shapes)</l>
<l>        tuple_gen_const (NumResult, 3, Radii)</l>
<l>        Indices := [1:NumResult]</l>
<l>        dev_clear_window ()</l>
<l>        Instructions[0] := 'Rotate: Left button'</l>
<l>        Instructions[1] := 'Zoom:   Shift + left button'</l>
<l>        Instructions[2] := 'Move:   Ctrl  + left button'</l>
<l>        visualize_object_model_3d (Window3D, [ObjectModel3D_Scene,ObjectModel3D_Result], [], [], ['color_' + [0,Indices],'point_size_0'], ['gray',Colors,1.0], Message1, [], Instructions, PoseOut)</l>
<c>        </c>
<c>        * Clear: Free result(s)</c>
<l>        clear_object_model_3d (ObjectModel3D_Scene)</l>
<l>        clear_object_model_3d (ObjectModel3D_Result)</l>
<l>        clear_object_model_3d (SampledScene)</l>
<l>        clear_object_model_3d (KeyPoints)</l>
<l>        clear_surface_matching_result (SurfaceMatchingResultID)</l>
<c></c>
<l>    endif</l>
<c></c>
<l>endfor</l>
<c></c>
<c>* Close the graphics window</c>
<l>dev_set_window (Window3D)</l>
<l>dev_close_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
